<?php
namespace App\Mixins\Gateways;

use Omnipay\Omnipay;
use Exception;

class AuthnetGateway
{
    
    public $params;
    public $gateway;
    public $response;
    public $transaction_id='';
    public $errors = [];
    public $success = false;
 
    public function __construct()
    {
        $this->gateway = Omnipay::create('AuthorizeNetApi_Api');
        $this->gateway->setAuthName(env('ANET_API_LOGIN_ID'));
        $this->gateway->setTransactionKey(env('ANET_TRANSACTION_KEY'));
        $this->gateway->setTestMode(true); //comment this line when move to 'live'
    }

    public function setParams($params)
    {
        $this->params = $params;
    }

    // https://github.com/thephpleague/omnipay
    public function charge()
    {
        try {

            // Set credit card
            $creditCard = $this->setCreditCard(); 

            $response = $this->gateway->purchase(
                array(
                    'amount' => $this->params['order_data']['amount'],
                    'currency' => $this->params['order_data']['currency'],
                    'card' => $creditCard
                ))->send();

            // Set global response
            $this->response = $response;

            // Process response
            $this->processResponse();

        } catch(Exception $e) {
            $this->setError( $e->getMessage() );
        }

    }

    private function setCreditCard()
    {
        return new \Omnipay\Common\CreditCard([
            'number' => $this->params['cart_data']['cc_number'],
            'expiryMonth' => $this->params['cart_data']['expiry_month'],
            'expiryYear' => $this->params['cart_data']['expiry_year'],
            'cvv' => $this->params['cart_data']['cvv'],
        ]);
    }

    private function processResponse()
    {
        /*
        $response->isSuccessful(); // is the response successful?
        $response->isRedirect(); // is the response a redirect?
        $response->getTransactionReference(); // a reference generated by the payment gateway
        $response->getTransactionId(); // the reference set by the originating website if available.
        $response->getMessage(); // a message generated by the payment gateway
        */

        // Retrieve data from response
        $this->transaction_id = $this->response->getData()['transactionResponse']['transId'];

        if( $this->response->isSuccessful() ) {    
            $this->success = true;
        } else {
            $this->setError( $this->response->getMessage() );
        }
    }

    private function makeTransactionId()
    {
        return time().rand(1, 999);
    }

    private function setError( $error )
    {
        $this->errors[] = $error;
    }

    public function getErrors()
    {
        return $this->errors;
    }

    public function isErrors()
    {
        return count($this->errors) > 0;
    }

    public function getResponse()
    {
        if( isset($this->response) ) {
            return $this->response->getData();
        } 
    }
    

}